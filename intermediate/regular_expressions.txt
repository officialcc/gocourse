package main

import (
	"fmt"
	"regexp"
)

func main() {

	// How to print a sentence that also has quotes inside
	fmt.Println("He said, \"I am great\"") // using double quotes, use escape sequence \" for each of the double quotes
	fmt.Println(`He said, "I am great"`) // using backticks

	// Compile a regex pattern to match email address
	re := regexp.MustCompile(`[a-zA-Z0-9._+%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}`) // a-zA-Z = lowercase a-z and uppercase A-Z

	// Test email strings
	email1 := "user@email.com"
	email2 := "invalid_email"

	// Match
	fmt.Println("Email 1:", re.MatchString(email1))
	fmt.Println("Email 2:", re.MatchString(email2))

	// Caoturing Groups
	// Compile a regex pattern to capture date components
	re = regexp.MustCompile(`(\d{4})-(\d{2})-(\d{2})`)

	// Test String
	date := "2025-08-22"

	// Find all submatches
	submatches := re.FindStringSubmatch(date)
	fmt.Println(submatches)
	fmt.Println(submatches[0]) // Complete string
	fmt.Println(submatches[1])
	fmt.Println(submatches[2])
	fmt.Println(submatches[3])

	// Source String
	str := "Hello World"

	// Replacing all vowels in Source String with *
	re = regexp.MustCompile(`[aeiou]`)
	result := re.ReplaceAllString(str, "*")
	fmt.Println(result) // Prints H*ll* W*rld

	// Flags - must start with a ?
	// i - case insensitive
	// m - multi line model
	// s - dot matches all

	re = regexp.MustCompile(`(?i)go`)

	// Test String
	text := "Golang is going great"

	// Match
	fmt.Println("Match:", re.MatchString(text)) // Prints Match: true; text contains go
}