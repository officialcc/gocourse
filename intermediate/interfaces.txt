package main

import (
	"fmt"
	"math"
)

type geometry interface {
	area() float64
	perimeter() float64
}

type rectangle struct {
	width, height float64
}

func (r rectangle) area() float64 {
	return r.height * r.width
}

func (r rectangle) perimeter() float64 {
	return 2 * (r.height + r.width)
}

type rectangle1 struct {
	width, height float64
}

func (r rectangle1) area() float64 {
	return r.height * r.width
}

// func (r rectangle1) perimeter() float64 {
// 	return 2 * (r.height + r.width)
// }

type circle struct {
	radius float64
}

func (c circle) area() float64 {
	return math.Pi * c.radius * c.radius
}

func (c circle) perimeter() float64 {
	return 2 * math.Pi * c.radius
}

func (c circle) diameter() float64 {
	return 2 * c.radius
}

func measure(g geometry) {
	fmt.Println(g)
	fmt.Println(g.area())
	fmt.Println(g.perimeter())
}

func main() {
	r := rectangle{width: 3, height: 4}
	// r1 := rectangle1{width: 3, height: 4}
	c := circle{radius: 5}

	measure(r)
	// measure(r1) // Errpr due to applying only the area method & not applying the perimeter method
	measure(c)

	myPrinter(1, "John", 45.9, true)

	printType(9)
	printType("John")
	printType(false)
}

func printType(i interface{}) {
	switch i.(type) {
	case int:
		fmt.Println("Type: int")
	case string:
		fmt.Println("Type: string")
	default:
		fmt.Println("Type: Not int nor string")
	}
}

func myPrinter(i ...interface{}) {
	for _, V := range i {
		fmt.Println(V)
	}
}