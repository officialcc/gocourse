package main

import (
	"fmt"
	"time"
)

func main() {

	// Current local time
	fmt.Println(time.Now())

	// Specific time
	specificTime := time.Date(2025, time.February, 7, 12, 0, 0, 0, time.UTC)
	fmt.Println("Specific Time:", specificTime)

	// Parse time
	// parsedTime, _ := time.Parse("2006-01-02", "2020-05-01") // Mon Jan 2 15:04:05 MST 2006
	// parsedTime1, _ := time.Parse("06-01-02", "20-05-01") // Mon Jan 2 15:04:05 MST 2006
	// parsedTime2, _ := time.Parse("06-1-2", "20-5-1") // Mon Jan 2 15:04:05 MST 2006
	// parsedTime3, _ := time.Parse("06-1-2 15-04", "20-5-1 18-03") // Mon Jan 2 15:04:05 MST 2006
	// fmt.Println(parsedTime)
	// fmt.Println(parsedTime1)
	// fmt.Println(parsedTime2)
	// fmt.Println(parsedTime3)

	// Formatting time
	t := time.Now()
	fmt.Println("Formatted time:", t.Format("Monday 06-01-02 15-04")) // Prints time.Now but parsed to this format

	oneDayLater := t.Add(time.Hour * 24)
	fmt.Println(oneDayLater)
	fmt.Println(oneDayLater.Weekday())

	fmt.Println("Rounded Time:", t.Round(time.Hour))

	loc, _ := time.LoadLocation("Asia/Singapore")
	t = time.Date(2025, time.February, 2, 7, 13, 01, 00, time.UTC)

	// Convert UTC to specific time zone
	tLocal := t.In(loc)

	// Perform rounding
	roundedTime := t.Round(time.Hour)
	roundedTimeLocal := roundedTime.In(loc)

	fmt.Println("Original Time (UTC):", t)
	fmt.Println("Original Time (Local):", tLocal)
	fmt.Println("Rounded Time (UTC):", roundedTime)
	fmt.Println("Rounded Time (Local):", roundedTimeLocal)

	fmt.Println("Truncated Time:", t.Truncate(time.Hour)) // Truncate is similar to Round, but will only round down, not up

	loc1, _ := time.LoadLocation("America/New_York")

	// Convert time to location
	tInNy := time.Now().In(loc1)
	fmt.Println("New York Time:", tInNy)

	t1 := time.Date(2025, time.February, 7, 13, 05, 01, 01, time.UTC)
	t2 := time.Date(2025, time.February, 7, 19, 05, 01, 01, time.UTC)

	duration := t2.Sub(t1)
	fmt.Println("Duration:", duration)

	// Compare times
	fmt.Println("t2 is after t1?", t2.After(t1))
}