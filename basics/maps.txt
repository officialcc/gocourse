package main

import (
	"fmt"
	"maps"
)

func main() {
	// Format to initialize a map
	// Method 1:
	// var mapVariable map[key]valueType

	// Method 2:
	// mapVariable := make(map[keyType]valueType)

	// Method 3 - Map Literal
	// mapVariable = map[keyType]valueType {
	// 	key1: value1,
	// 	key2: value2,
	// }

	myMap := make(map[string]int)
	fmt.Println(myMap) // prints map[]

	myMap["key1"] = 9
	myMap["code"] = 18

	fmt.Println(myMap) // prints map[code:18 key1:9]
	fmt.Println(myMap["key1"]) // prints 9
	fmt.Println(myMap["nonexistentkey"]) // prints 0

	// Changing value of a key
	myMap["code"] = 21
	fmt.Println(myMap) // prints map[code:21 key1:9]

	// Remove a key
	delete(myMap, "key1")
	fmt.Println(myMap) // prints map[code:21]

	// To clear an entire map
	clear(myMap)
	fmt.Println(myMap) // prints map[]

	myMap["key1"] = 7
	myMap["key2"] = 8
	myMap["key3"] = 9

	value, unknownvalue := myMap["key1"]
	fmt.Println(value) // prints 7
	fmt.Println(unknownvalue) // prints true -> that there is a value in the key "key1"

	_, ok := myMap["key1"]
	if ok {
		fmt.Println("A value exists with key1")
	}
	fmt.Println("There is a value associated with key1:", ok)

	mymap2 := map[string]int{"a": 1, "b": 2}
	fmt.Println(mymap2)

	myMap3 := map[string]int{"a": 1, "b": 2}

	// Comparing 2 maps whether equal
	if maps.Equal(myMap3, mymap2) {
		fmt.Println("myMap3 and myMap2 are equal")
	}

	// To iterate over a map
	for k, v := range myMap3 {
		fmt.Println(k, v)
	}

	// Blank Identifier to only extract the value without the key
	for _, v := range myMap3 {
		fmt.Println(v)
	}

	// Initialize a nil map
	var myMap4 map[string]string
	if myMap4 == nil {
		fmt.Println("Map is initializzed to nil value")
	} else {
		fmt.Println("Map is not initialized to nil value")
	}

	val := myMap4["nonexistentkey"]
	fmt.Println(val) // Prints a blank string

	// Wrong method to add a key-value to a nil map
	// myMap4["key"] = "Value"
	// fmt.Println(myMap4)

	// Correct method to add a key-value to a nil map
	myMap4 = make(map[string]string)
	myMap4["key"] = "Value"
	fmt.Println(myMap4)
	fmt.Println("myMap length is", len(myMap)) // Length of a map = how many keys it has

	// Nested maps aka "multi-dimensional" maps
	myMap5 := make(map[string]map[string]string)
	myMap5["map1"] = myMap4

	fmt.Println(myMap5)
}